{"ast":null,"code":"export default {\n  name: 'CustomCheckbox',\n  props: {\n    \"value\": {\n      type: String,\n      default: \"N.A\"\n    },\n    isScribe: {\n      type: String,\n      default: \"N.A\"\n    },\n    selectedValue: {\n      type: Array,\n      default: () => []\n    }\n  },\n  emit: ['updateSelectedValue'],\n\n  setup(props, context) {\n    function getValue() {\n      let isSelected = false;\n\n      if (props.isScribe == '1') {\n        isSelected = true;\n      }\n\n      return isSelected;\n    }\n\n    function handleInput(v) {\n      const tmpSelectedValue = props.selectedValue;\n      let isFoundKey = false;\n\n      for (let i = 0; i < tmpSelectedValue.length; i++) {\n        if (tmpSelectedValue[i] == props.value) {\n          isFoundKey = true;\n\n          if (!v) {\n            tmpSelectedValue.splice(i, 1);\n          }\n\n          break;\n        }\n      }\n\n      if (!isFoundKey) {\n        tmpSelectedValue.push(props.value);\n      }\n\n      context.emit('updateSelectedValue', tmpSelectedValue);\n    }\n\n    return {\n      handleInput,\n      getValue\n    };\n  }\n\n};","map":{"version":3,"sources":["C:\\Users\\Lenovo\\Documents\\SwaggyCars\\carsayara.com\\src\\components\\core\\checkbox\\CustomCheckbox.vue"],"names":[],"mappings":"AAOA,eAAe;AACb,EAAA,IAAI,EAAE,gBADO;AAEb,EAAA,KAAK,EAAE;AACL,aAAU;AACN,MAAA,IAAG,EAAI,MADD;AAEN,MAAA,OAAM,EAAI;AAFJ,KADL;AAKL,IAAA,QAAO,EAAI;AACP,MAAA,IAAG,EAAI,MADA;AAEP,MAAA,OAAM,EAAI;AAFH,KALN;AASL,IAAA,aAAY,EAAI;AACZ,MAAA,IAAI,EAAE,KADM;AAEZ,MAAA,OAAO,EAAE,MAAM;AAFH;AATX,GAFM;AAgBb,EAAA,IAAI,EAAE,CAAC,qBAAD,CAhBO;;AAiBb,EAAA,KAAK,CAAC,KAAD,EAAQ,OAAR,EAAiB;AAEpB,aAAS,QAAT,GAAoB;AAChB,UAAI,UAAS,GAAI,KAAjB;;AAEA,UAAG,KAAK,CAAC,QAAN,IAAkB,GAArB,EAA0B;AACxB,QAAA,UAAS,GAAI,IAAb;AACF;;AAEA,aAAO,UAAP;AACJ;;AAEA,aAAS,WAAT,CAAqB,CAArB,EAAwB;AACpB,YAAM,gBAAe,GAAI,KAAK,CAAC,aAA/B;AACA,UAAI,UAAS,GAAI,KAAjB;;AACA,WAAI,IAAI,CAAA,GAAI,CAAZ,EAAe,CAAC,GAAC,gBAAgB,CAAC,MAAlC,EAA2C,CAAC,EAA5C,EAAgD;AAC5C,YAAG,gBAAgB,CAAC,CAAD,CAAhB,IAAuB,KAAK,CAAC,KAAhC,EAAuC;AACnC,UAAA,UAAS,GAAI,IAAb;;AACA,cAAG,CAAC,CAAJ,EAAO;AACH,YAAA,gBAAgB,CAAC,MAAjB,CAAwB,CAAxB,EAA2B,CAA3B;AACJ;;AACA;AACJ;AACJ;;AAEA,UAAG,CAAC,UAAJ,EAAgB;AACZ,QAAA,gBAAgB,CAAC,IAAjB,CAAsB,KAAK,CAAC,KAA5B;AACJ;;AAEA,MAAA,OAAO,CAAC,IAAR,CAAa,qBAAb,EAAoC,gBAApC;AACJ;;AAEA,WAAO;AACH,MAAA,WADG;AAEH,MAAA;AAFG,KAAP;AAIF;;AArDa,CAAf","sourcesContent":["<template>\n  <label class=\"checkbox-label\">\n    <input type=\"checkbox\" class=\"checkbox-input\" :checked=\"getValue()\" @input=\"handleInput($event.target.checked)\" />\n    <span class=\"circle-checkbox\"></span>\n  </label>\n</template>\n<script>\nexport default {\n  name: 'CustomCheckbox',\n  props: {\n    \"value\" : {\n        type : String,\n        default : \"N.A\"\n    },\n    isScribe : {\n        type : String,\n        default : \"N.A\"\n    },\n    selectedValue : {\n        type: Array,\n        default: () => []\n    }\n  },\n  emit: ['updateSelectedValue'],\n  setup(props, context) {\n    \n    function getValue() {\n        let isSelected = false;\n        \n        if(props.isScribe == '1') {\n          isSelected = true;\n        } \n       \n        return isSelected;   \n    }\n\n    function handleInput(v) {   \n        const tmpSelectedValue = props.selectedValue;\n        let isFoundKey = false;\n        for(let i = 0; i<tmpSelectedValue.length ; i++) {\n            if(tmpSelectedValue[i] == props.value) {\n                isFoundKey = true;\n                if(!v) {\n                    tmpSelectedValue.splice(i, 1);\n                }\n                break;\n            }\n        }\n\n        if(!isFoundKey) {                \n            tmpSelectedValue.push(props.value);\n        }\n        \n        context.emit('updateSelectedValue', tmpSelectedValue);\n    }\n\n    return {\n        handleInput,\n        getValue\n    }\n  }\n};\n</script>\n<style lang=\"scss\">\n:root {\n  .checkbox-label {\n    position: relative;\n  }\n  .circle-checkbox {\n    width: 16px;\n    height: 16px;\n    border: 1px solid #ccc;\n    display: inline-block;\n    border-radius: 50%;\n    transition: all linear 0.3s;\n    &:after {\n      content: \"\";\n      position: absolute;\n      top: 3px;\n      left: 6px;\n      border-bottom: 2px solid #fff;\n      border-right: 2px solid #fff;\n      height: 10px;\n      width: 4px;\n      transform: rotate(45deg);\n      visibility: hidden;\n    }\n  }\n  .checkbox-input {\n    display: none;\n    &:checked ~ span {\n      background: #5b4db2;\n      &:after {\n        visibility: visible;\n      }\n    }\n  }\n}\n</style>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}