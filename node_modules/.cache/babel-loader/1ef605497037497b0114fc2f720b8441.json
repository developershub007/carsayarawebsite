{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/messaging\";\nimport router from '@/router';\nimport PsLabel from '@/components/core/label/PsLabel.vue';\nimport { createProductProviderState } from '@/store/modules/item/ProductProvider';\nimport { PsValueProvider } from '@/store/modules/core/PsValueProvider';\nimport PsConst from '@/object/constant/ps_constants';\nexport default {\n  name: \"PsNotificationBox\",\n  components: {\n    PsLabel\n  },\n\n  data() {\n    return {\n      title: \"Test\",\n      subject: \"Test\",\n      flag: \"Test\",\n      messaging: firebase.messaging.isSupported() ? firebase.messaging() : null,\n      currentMessage: \"Test\",\n      requireInteraction: true,\n      notify: false\n    };\n  },\n\n  methods: {\n    closed() {\n      this.notify = false;\n    },\n\n    async clicked(value) {\n      if (value == 'fe_broadcast') {\n        router.push({\n          name: \"notification-list\"\n        });\n      }\n\n      if (value == 'review') {\n        router.push({\n          name: 'review-list',\n          query: {\n            user_id: localStorage.loginUserId\n          }\n        });\n      }\n\n      if (value == 'chat' || value == 'bought') {\n        const itemProvider = createProductProviderState();\n        const psValueHolder = PsValueProvider.psValueHolder;\n        const loginUserId = psValueHolder.getLoginUserId();\n        const itemId = this.currentMessage.data.item_id;\n        const item = await itemProvider.loadItem(itemId, loginUserId);\n        let chatFlag = PsConst.CHAT_FROM_BUYER.toString();\n\n        if (loginUserId == this.currentMessage.data.buyer_id) {\n          chatFlag = PsConst.CHAT_FROM_SELLER.toString();\n        }\n\n        router.push({\n          name: 'chat',\n          query: {\n            buyer_user_id: this.currentMessage.data.buyer_id,\n            seller_user_id: this.currentMessage.data.seller_id,\n            item_name: item.data.title,\n            item_id: this.currentMessage.data.item_id,\n            item_image_name: item.data.defaultPhoto.imgPath,\n            item_price: item.data.price,\n            currency: item.data.itemCurrency.currencySymbol,\n            condition: item.data.conditionOfItem.name,\n            chat_flag: chatFlag\n          }\n        });\n      }\n\n      if (value == \"subscribe\") {\n        const itemProvider = createProductProviderState();\n        const psValueHolder = PsValueProvider.psValueHolder;\n        const loginUserId = psValueHolder.getLoginUserId();\n        const itemId = this.currentMessage.data.item_id;\n        const item = await itemProvider.loadItem(itemId, loginUserId);\n        router.push({\n          name: 'item',\n          params: {\n            itemName: item.data.title.split(' ').join('-').toLowerCase()\n          },\n          query: {\n            item_id: this.currentMessage.data.item_id,\n            item_name: item.data.title.split(' ').join('-').toLowerCase()\n          }\n        });\n      }\n    },\n\n    receiveMessage() {\n      try {\n        if (!this.messaging) return;\n        this.messaging.onMessage(payload => {\n          // debugger\n          this.currentMessage = payload;\n          console.log(\"Message received. \", this.currentMessag);\n          this.setNotificationBoxForm(payload.notification.title, payload.notification.body, payload.data.flag);\n          this.notify = true;\n          setTimeout(() => {\n            this.notify = false;\n          }, 10000);\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    },\n\n    setNotificationBoxForm(title, subject, flag) {\n      this.title = title;\n      this.subject = subject;\n      this.flag = flag;\n    }\n\n  },\n\n  created() {\n    this.receiveMessage();\n  },\n\n  validations: function () {\n    return {};\n  },\n  computed: {}\n};","map":{"version":3,"sources":["C:\\Users\\Lenovo\\Documents\\SwaggyCars\\carsayara.com\\src\\components\\core\\notificationbox\\PsNotificationBox.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div v-if=\"notify\"> \n        <div id=\"notification-box\" class=\"flex items-center w-mobile sm:w-median lg:w-64 justify-between leading-none lg:px-2 py-1 px-1  bg-primary-000 dark:bg-primaryDark-black rounded-t-xl lg:rounded-t-2xl top-0 fixed\" @click=\"clicked(flag)\">\n            <a href=\"#\" id=\"notification-close\" @click=\"closed()\" title=\"close\">x</a>\n            <div class=\"flex flex-row items-center no-underline text-black\">\n                <div class=\"me-2 w-8 sm:w-10 my-auto\">\n                    <img alt=\"Placeholder\" class=\"rounded-md w-auto sm:h-10 h-8 cursor-pointer object-cover\" width=\"50px\" height=\"50px\" src=\"@/assets/images/flutter_admotors_logo.png\" >\n                </div>\n                \n                <p class=\"ms-2 mt-1 text-sm flex-grow\">\n                    <span class=\"flex\">\n                        <ps-label class=\"truncate lg:text-sm text-xs font-medium\" > {{title}} </ps-label>\n                    </span>\n                    <ps-label class=\" font-medium text-xxs lg:text-xs \" textColor=\"text-secondary-400 dark:text-secondaryDark-grey\"> {{subject}}  </ps-label>\n                </p>\n            </div>\n        </div> \n    </div>\n \n</template>\n\n<script>\nimport firebase from \"firebase/app\";\nimport \"firebase/messaging\";\nimport router from '@/router';\nimport PsLabel from '@/components/core/label/PsLabel.vue';\nimport { createProductProviderState } from '@/store/modules/item/ProductProvider';\nimport { PsValueProvider } from '@/store/modules/core/PsValueProvider';\nimport PsConst from '@/object/constant/ps_constants';\n\nexport default {\n    name: \"PsNotificationBox\",\n\n    components: {\n        PsLabel\n    },\n \n    data() {\n        \n        return {\n            title: \"Test\",\n            subject: \"Test\",\n            flag: \"Test\",\n            messaging: firebase.messaging.isSupported() ? firebase.messaging() : null,\n            currentMessage: \"Test\",\n            requireInteraction: true,\n            notify: false,\n        };\n    },\n\n    methods: {\n        closed(){\n            this.notify = false;\n        },\n        async clicked(value){\n            if(value == 'fe_broadcast') {\n                router.push({ name : \"notification-list\"});\n            }\n            if(value == 'review') {\n                router.push({name : 'review-list', query: { user_id: localStorage.loginUserId } });\n            }\n            if(value == 'chat' || value == 'bought') {\n                const itemProvider = createProductProviderState();\n                const psValueHolder = PsValueProvider.psValueHolder;\n                const loginUserId = psValueHolder.getLoginUserId();\n                const itemId = this.currentMessage.data.item_id;\n                const item = await itemProvider.loadItem(itemId, loginUserId);\n                let chatFlag = PsConst.CHAT_FROM_BUYER.toString();\n                if(loginUserId == this.currentMessage.data.buyer_id){\n                    chatFlag = PsConst.CHAT_FROM_SELLER.toString();\n                }\n                \n                router.push({\n                    name : 'chat', \n                    query: { \n                        buyer_user_id : this.currentMessage.data.buyer_id,\n                        seller_user_id : this.currentMessage.data.seller_id,\n                        item_name : item.data.title ,\n                        item_id : this.currentMessage.data.item_id,\n                        item_image_name : item.data.defaultPhoto.imgPath,\n                        item_price : item.data.price,\n                        currency : item.data.itemCurrency.currencySymbol,\n                        condition : item.data.conditionOfItem.name,\n                        chat_flag : chatFlag\n\n                    }\n                });\n            }\n            if(value == \"subscribe\") {\n                const itemProvider = createProductProviderState();\n                const psValueHolder = PsValueProvider.psValueHolder;\n                const loginUserId = psValueHolder.getLoginUserId();\n                const itemId = this.currentMessage.data.item_id;\n                const item = await itemProvider.loadItem(itemId, loginUserId);\n                router.push({\n                    name: 'item',\n                    params: {\n                        itemName: item.data.title.split(' ').join('-').toLowerCase(), \n                    },\n                    query: {\n                        item_id: this.currentMessage.data.item_id,\n                        item_name: item.data.title.split(' ').join('-').toLowerCase()\n                    }\n                });\n               \n            }\n          \n        },\n        receiveMessage() {\n            try {\n                if(!this.messaging) return;\n                this.messaging.onMessage((payload) => {\n                    // debugger\n                    this.currentMessage = payload;\n                    console.log(\"Message received. \", this.currentMessag);\n                   \n                    this.setNotificationBoxForm(\n                        payload.notification.title,\n                        payload.notification.body,\n                        payload.data.flag,\n                    );\n                   \n                    this.notify = true;\n                    setTimeout(() => {\n                        this.notify = false;\n                    }, 10000);\n                });\n\n            } catch (e) {\n                console.log(e);\n            }\n        },\n      \n        setNotificationBoxForm(title, subject, flag) {\n            this.title = title;\n            this.subject = subject;\n            this.flag = flag;\n        },\n    },\n\n    created() {\n        this.receiveMessage();\n    },\n\n    validations: function () {\n        return {};\n    },\n\n    computed: {},\n};\n</script>\n\n<style>\n#notification-box {\n    display: flex;\n    position: absolute;\n    right: 5px;\n    height: 100px;\n    background-color: #fff;\n    z-index: 1;\n    border: 1px dotted black;\n    border-radius: 12px;\n}\n#notification-close {\n    position: absolute;\n    color: #777;\n    font: 14px;\n    right: 10px;\n    text-decoration: none;\n    text-shadow: 0 1px 0 #fff;\n    top: 6px;\n    z-index: 10;\n    cursor: pointer;\n}\n\nimg{\n    width: 50px;\n}\n</style>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}