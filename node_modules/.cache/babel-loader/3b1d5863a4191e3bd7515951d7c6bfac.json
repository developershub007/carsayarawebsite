{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"checkbox-label\"\n};\nconst _hoisted_2 = [\"checked\"];\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"circle-checkbox\"\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"label\", _hoisted_1, [_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    class: \"checkbox-input\",\n    checked: $setup.getValue(),\n    onInput: _cache[0] || (_cache[0] = $event => $setup.handleInput($event.target.checked))\n  }, null, 40\n  /* PROPS, HYDRATE_EVENTS */\n  , _hoisted_2), _hoisted_3]);\n}","map":{"version":3,"sources":["C:\\Users\\Lenovo\\Documents\\SwaggyCars\\carsayara.com\\src\\components\\core\\checkbox\\CustomCheckbox.vue"],"names":[],"mappings":";;AACS,EAAA,KAAK,EAAC;;;;gCAEX,mBAAA,CAAqC,MAArC,EAAqC;AAA/B,EAAA,KAAK,EAAC;AAAyB,CAArC,EAA6B,IAA7B,EAA6B,CAAA;AAAA;AAA7B,C;;;uBAFF,mBAAA,CAGQ,OAHR,EAAA,UAAA,EAGQ,CAFN,mBAAA,CAAkH,OAAlH,EAAkH;AAA3G,IAAA,IAAI,EAAC,UAAsG;AAA3F,IAAA,KAAK,EAAC,gBAAqF;AAAnE,IAAA,OAAO,EAAE,MAAA,CAAA,QAAA,EAA0D;AAA7C,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,MAAA,IAAE,MAAA,CAAA,WAAA,CAAY,MAAM,CAAC,MAAP,CAAc,OAA1B,CAAF;AAAwC,GAAlH,E,IAAA,E;;AAAA,I,UAAA,CAEM,EADN,UACM,CAHR,C","sourcesContent":["<template>\n  <label class=\"checkbox-label\">\n    <input type=\"checkbox\" class=\"checkbox-input\" :checked=\"getValue()\" @input=\"handleInput($event.target.checked)\" />\n    <span class=\"circle-checkbox\"></span>\n  </label>\n</template>\n<script>\nexport default {\n  name: 'CustomCheckbox',\n  props: {\n    \"value\" : {\n        type : String,\n        default : \"N.A\"\n    },\n    isScribe : {\n        type : String,\n        default : \"N.A\"\n    },\n    selectedValue : {\n        type: Array,\n        default: () => []\n    }\n  },\n  emit: ['updateSelectedValue'],\n  setup(props, context) {\n    \n    function getValue() {\n        let isSelected = false;\n        \n        if(props.isScribe == '1') {\n          isSelected = true;\n        } \n       \n        return isSelected;   \n    }\n\n    function handleInput(v) {   \n        const tmpSelectedValue = props.selectedValue;\n        let isFoundKey = false;\n        for(let i = 0; i<tmpSelectedValue.length ; i++) {\n            if(tmpSelectedValue[i] == props.value) {\n                isFoundKey = true;\n                if(!v) {\n                    tmpSelectedValue.splice(i, 1);\n                }\n                break;\n            }\n        }\n\n        if(!isFoundKey) {                \n            tmpSelectedValue.push(props.value);\n        }\n        \n        context.emit('updateSelectedValue', tmpSelectedValue);\n    }\n\n    return {\n        handleInput,\n        getValue\n    }\n  }\n};\n</script>\n<style lang=\"scss\">\n:root {\n  .checkbox-label {\n    position: relative;\n  }\n  .circle-checkbox {\n    width: 16px;\n    height: 16px;\n    border: 1px solid #ccc;\n    display: inline-block;\n    border-radius: 50%;\n    transition: all linear 0.3s;\n    &:after {\n      content: \"\";\n      position: absolute;\n      top: 3px;\n      left: 6px;\n      border-bottom: 2px solid #fff;\n      border-right: 2px solid #fff;\n      height: 10px;\n      width: 4px;\n      transform: rotate(45deg);\n      visibility: hidden;\n    }\n  }\n  .checkbox-input {\n    display: none;\n    &:checked ~ span {\n      background: #515A9A;\n      &:after {\n        visibility: visible;\n      }\n    }\n  }\n}\n</style>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}